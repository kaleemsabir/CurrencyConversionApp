plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id 'kotlin-parcelize'
}
apply plugin: 'kotlin-android'

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.example.currencyconversionapp"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            debuggable true
        }
    }

    flavorDimensions "default"

    productFlavors {
        dev {
            dimension "default"

            buildConfigField "String", "BASE_URL", "\"${getProperty("api_keys.properties", "base_url_dev")}\""
        }
        stagging {
            dimension "default"

            buildConfigField "String", "BASE_URL", "\"${getProperty("api_keys.properties", "base_url_staging")}\""
        }
        production {
            dimension "default"

            buildConfigField "String", "BASE_URL", "\"${getProperty("api_keys.properties", "base_url_live")}\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // dependency injection
    implementation "com.google.dagger:hilt-android:$hiltVersion"
    kapt "com.google.dagger:hilt-compiler:$hiltVersion"


    def glideVersion = '4.14.2'
    // glide library
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"

    def lifeCycleViewModel = '2.5.1'
    // ViewModel and Lifecycle dependencies
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifeCycleViewModel"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifeCycleViewModel"

    // room
    def room_version = "2.5.2"
    kapt "androidx.room:room-compiler:$room_version"
    implementation("androidx.room:room-ktx:$room_version")

    // WorkManager
    implementation("androidx.work:work-runtime-ktx:2.8.1")
    implementation "androidx.hilt:hilt-work:1.0.0"

    // coroutines
    def coroutine_version = "1.6.4"
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version")

    // Retrofit Library
    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

}